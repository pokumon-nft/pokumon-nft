import { createAlchemyWeb3 } from "@alch/alchemy-web3";
import { exit } from "process";
import { NFTStorage, File } from "nft.storage";
import path from "path";
import fs from "fs";
// eslint-disable-next-line node/no-missing-import
import { Firebase } from "./firebase";

const API_URL = process.env.API_URL;
const PUBLIC_KEY = process.env.PUBLIC_KEY;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const NFT_CONTRACT_ADDRESS = process.env.NFT_CONTRACT_ADDRESS;
const NFTSTORAGE_API_KEY = process.env.NFTSTORAGE_API_KEY;

if (!API_URL || !NFTSTORAGE_API_KEY || !NFT_CONTRACT_ADDRESS) {
  console.error("env is not set");
  exit();
}

const web3 = createAlchemyWeb3(API_URL);
const contract = require("../artifacts/contracts/PokumonNFT.sol/PokumonNFT.json");
const nftContract = new web3.eth.Contract(contract.abi, NFT_CONTRACT_ADDRESS);
const storageClient = new NFTStorage({ token: NFTSTORAGE_API_KEY });

async function uploadIPFS(filePath: string, name: string, description: string) {
  const imageData = fs.readFileSync(filePath);
  const fileName = path.basename(filePath);
  const imageFile = new File([imageData], fileName, {
    type: "image/png",
  });
  const metadata = await storageClient.store({
    name: name,
    description: description,
    image: imageFile,
  });

  const ipfsURL = "https://ipfs.io/ipfs/" + metadata.ipnft + "/metadata.json";
  return ipfsURL;
}

async function mintNFT(
  tokenURI: string,
  name: string,
  gas = 2000000,
  gasPrice = "500000000000"
) {
  if (!PUBLIC_KEY || !PRIVATE_KEY) {
    console.error("env is not set");
    exit();
  }
  const nonce = await web3.eth.getTransactionCount(PUBLIC_KEY, "latest"); // get latest nonce

  // the transaction
  const tx = {
    from: PUBLIC_KEY,
    to: NFT_CONTRACT_ADDRESS,
    nonce: nonce,
    gas,
    gasPrice,
    data: nftContract.methods
      .safeMintWithName(PUBLIC_KEY, tokenURI, name)
      .encodeABI(),
  };

  const signedTx = await web3.eth.accounts.signTransaction(tx, PRIVATE_KEY);
  const result = await web3.eth.sendSignedTransaction(signedTx.rawTransaction!);
  console.log(result.transactionHash);
  return result.transactionHash;
}

async function main() {
  const namesFile = fs.readFileSync("./ai_models/pokumon_names.txt", "utf8");
  const names = namesFile.toString().split("\n");
  const firebase = Firebase.getInstance();
  const loopCount = 940;
  for (let id = 1; id < loopCount; id++) {
    const name = names[id - 1];
    const description =
      'Pokumon is the only unique digital asset in the world generated by AI and developed for the dApp called "Pokumon" These monsters live in https://pokumon.ai/, and you can raise them there or have them fight each other.';
    const filePath = "./ai_models/images/" + id + ".png";
    const tokenURI = await uploadIPFS(filePath, name, description);
    await sleep(10000);
    console.log("Uploaded to IPFS: " + tokenURI);
    while (true) {
      try {
        console.log("Mint Start! id: " + id);
        await mintNFT(tokenURI, name);
        console.log("Mited!: " + name);
        break;
      } catch (e) {
        console.log("Mint Retry! id: " + id);
        await sleep(2000);
      }
    }

    await firebase.addNFT(
      "https://storage.googleapis.com/pokumon/" + id + ".png",
      name,
      id,
      tokenURI
    );
    await sleep(2000);
  }
}

const sleep = async (time: number) =>
  await new Promise((resolve) => setTimeout(resolve, time));

function mainDev() {
  const tokenURI = "https://gateway.pinata.cloud/ipfs/QmNakDL3RXm2Q8AzVU8CX1KKHQvBE6VtzFsoN5oGDkUZz6";
  const name = "pikachu";
  const gas = 500000;
  const gasPrice = "200000000000";
  mintNFT(tokenURI, name, gas, gasPrice);
}

process.env.NODE_ENV === "production" ? main() : mainDev();
